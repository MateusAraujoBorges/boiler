datatype SysModule = DB | SN | CT | AC
datatype SysAction = Initialise | Register | Terminate | Analysis 

channel query, data, pressure, stop, start, command -- global events
channel internalAction -- placeholder event?
channel sysEvent : SysModule.SysAction

P = query -> data -> P
Q = internalAction -> Q

Database_Initialise =  sysEvent.DB.Initialise -> Database_Register
Database_Register =  sysEvent.DB.Register -> pressure -> (Database_Register [] Database_Analysis [] Database_Terminate)
Database_Terminate =  sysEvent.DB.Terminate -> Database_Initialise
Database_Analysis =  sysEvent.DB.Analysis -> query -> data -> Database_Register
HMSC_Database = internalAction -> Database_Initialise
DatabaseWCoordAct = HMSC_Database\{internalAction}

Control_Initialise = sysEvent.CT.Initialise -> start -> Control_Register
Control_Register = sysEvent.CT.Register -> (Control_Register [] Control_Analysis [] Control_Terminate)
Control_Terminate = sysEvent.CT.Terminate -> stop -> Control_Initialise
Control_Analysis = sysEvent.CT.Analysis -> query -> data -> command -> Control_Register
HMSC_Control = internalAction -> Control_Initialise
ControlWCoordAct = HMSC_Control\{internalAction}

Sensor_Initialise = sysEvent.SN.Initialise -> start -> Sensor_Register
Sensor_Register = sysEvent.SN.Register -> pressure -> (Sensor_Register [] Sensor_Terminate [] Sensor_Analysis)
Sensor_Terminate = sysEvent.SN.Terminate -> stop -> Sensor_Initialise
Sensor_Analysis = sysEvent.SN.Analysis -> Sensor_Register
HMSC_Sensor = internalAction -> Sensor_Initialise
SensorWCoordAct = HMSC_Sensor\{internalAction}

Actuator_Initialise = sysEvent.AC.Initialise -> Actuator_Register
Actuator_Register = sysEvent.AC.Register -> (Actuator_Register [] Actuator_Analysis [] Actuator_Terminate)
Actuator_Terminate = sysEvent.AC.Terminate -> Actuator_Initialise
Actuator_Analysis = sysEvent.AC.Analysis -> command -> Actuator_Register
HMSC_Actuator = internalAction -> Actuator_Analysis
ActuatorWCoordAct = HMSC_Actuator\{internalAction}

--AllInternalEvents = {x.y | x <- SysModule, y <- SysAction}
--Database = DatabaseWCoordAct\{{|AllInternalEvents|}}

Database = DatabaseWCoordAct \ {sysEvent.SN.Initialise,sysEvent.SN.Terminate,sysEvent.AC.Initialise,sysEvent.DB.Register,sysEvent.DB.Analysis,sysEvent.CT.Analysis,sysEvent.AC.Terminate,sysEvent.DB.Initialise,sysEvent.CT.Initialise,sysEvent.AC.Register,sysEvent.AC.Analysis,sysEvent.CT.Terminate,sysEvent.DB.Terminate,sysEvent.SN.Register,sysEvent.SN.Analysis}
--
DatabaseOnHand = pressure -> DH1
DH1 = pressure -> DH1 [] query -> data -> DatabaseOnHand

--||ComponentsWCoordAct = (DatabaseWCoordAct || ControlWCoordAct || SensorWCoordAct || ActuatorWCoordAct).



-- Control_Initialise = (s_Control_Initialise -> start -> END).
-- Control_Register = (s_Control_Register -> END).
-- Control_Terminate = (s_Control_Terminate -> stop -> END).
-- Control_Analysis = (s_Control_Analysis -> query -> data -> command -> END).
-- HMSC_Control = (internalAction -> N0),
-- N0 = Control_Initialise;N0_Adj,
-- N1 = Control_Register;N1_Adj,
-- N2 = Control_Analysis;N2_Adj,
-- N3 = Control_Terminate;N3_Adj,
-- N0_Adj = (internalAction -> N1),
-- N1_Adj = (internalAction -> N1 | internalAction -> N2 | internalAction -> N3),
-- N2_Adj = (internalAction -> N1),
-- N3_Adj = (internalAction -> N0).
-- deterministic ||ControlWCoordAct = HMSC_Control\{internalAction}.


-- Database_Initialise = s_Database_Initialise -> SKIP
-- Database_Register = s_Database_Register -> pressure -> SKIP
-- Database_Terminate = s_Database_Terminate -> SKIP
-- Database_Analysis = s_Database_Analysis -> query -> data -> SKIP
-- HMSC_Database = internalAction -> N0
-- N0 = Database_Initialise;N0_Adj
-- N1 = Database_Register;N1_Adj
-- N2 = Database_Analysis;N2_Adj
-- N3 = Database_Terminate;N3_Adj
-- N0_Adj = internalAction -> N1
-- N1_Adj = internalAction -> N1 | internalAction -> N2 | internalAction -> N3
-- N2_Adj = internalAction -> N1
-- N3_Adj = internalAction -> N0
-- deterministic ||DatabaseWCoordAct = HMSC_Database\{internalAction}

-- channel up,down
-- COUNT(lo,n,hi) =
--     lo < n & down -> COUNT(lo,n-1,hi)
--   []
--     n < hi & up -> COUNT(lo,n+1, hi)

